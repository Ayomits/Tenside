const {
  CommandInteraction,
  EmbedBuilder,
  ComponentType,
  filter,
  PermissionFlagsBits,
  StringSelectMenuBuilder,
  StringSelectMenuOptionBuilder,
  ActionRowBuilder,
} = require("discord.js");
const { SlashCommandBuilder } = require("@discordjs/builders");
const fs = require("fs");
const path = require("path");
const img = `https://i.imgur.com/i3Y3gQF.png`;
module.exports = {
  data: new SlashCommandBuilder()
    .setName("help")
    .setDescription("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞")
    .setDMPermission(true),

  async execute(interaction) {
    const configs = path.resolve("configs");
    const descriptionembed = new EmbedBuilder()
      .setTitle("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
      .setDescription(
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å –∫–æ–º–º–∞–Ω–¥ –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å."
      )
      .setColor("#2F3136")
      .setImage(img);
    const helpselect = new StringSelectMenuBuilder()
      .setCustomId("HelpSelect")
      .setMaxValues(1)
      .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å!`)
      .setOptions(
        new StringSelectMenuOptionBuilder()
          .setLabel("–≠–∫–æ–Ω–æ–º–∏–∫–∞")
          .setValue("economy")
          .setDescription("–ö–æ–º–∞–Ω–¥—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏")
          .setEmoji("üí∞"),

        new StringSelectMenuOptionBuilder()
          .setLabel("–ë—Ä–∞–∫–∏")
          .setValue("marry")
          .setDescription("–ö–æ–º–∞–Ω–¥—ã –±—Ä–∞–∫–∞")
          .setEmoji("üíç"),

        new StringSelectMenuOptionBuilder()
          .setLabel("–†–µ–∞–∫—Ü–∏–∏")
          .setValue("reaction")
          .setDescription("–ö–æ–º–∞–Ω–¥—ã –†–µ–∞–∫—Ü–∏–∏")
          .setEmoji("üé≠")
      );
    const row = new ActionRowBuilder().setComponents(helpselect);

    const helpmessage = await interaction.reply({
      embeds: [descriptionembed],
      components: [row],
    });
    const collectorFilter = (i) => i.user.id === interaction.user.id;
    const collector = helpmessage.createMessageComponentCollector({
      componentType: ComponentType.StringSelect,
      filter: collectorFilter,
    });

    collector.on("collect", async (i) => {
      const selection = i.values[0];
      if (selection == `reaction`) {
        const data = JSON.parse(
          await fs.promises.readFile(configs + "/reactions.json")
        );

        const descriptionembed = new EmbedBuilder()
          .setTitle("–°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π")
          .setDescription(
            "```–¢—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥-—Ä–µ–∞–∫—Ü–∏–π.\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≥–¥–µ —É–≥–æ–¥–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–æ –±–µ–∑ –æ—Ñ—Ñ—Ç–æ–ø–∞ –∏ —Å–ø–∞–º–∞)```"
          )
          .setColor("#2F3136");
        const loveEmbed = new EmbedBuilder()
          .setTitle("–õ—é–±–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
          .setImage(img)
          .setColor("#2F3136");
        const emotionEmbed = new EmbedBuilder()
          .setTitle("–ö–æ–º–∞–Ω–¥—ã —Å —ç–º–æ—Ü–∏—è–º–∏")
          .setImage(img)
          .setColor("#2F3136");
        const actionEmbed = new EmbedBuilder()
          .setTitle("–ö–æ–º–∞–Ω–¥—ã –¥–µ–π—Å—Ç–≤–∏–π")
          .setImage(img)
          .setColor("#2F3136");
        let loveDescription = "";
        let emotionDescription = "";
        let actionDescription = "";

        for (let react in data) {
          switch (data[react].type) {
            case "love":
              loveDescription += `> **${data[react].api_name} (${data[react].aliases})** - ${data[react].action}\n`;
              break;
            case "emotion":
              emotionDescription += `> **${data[react].api_name} (${data[react].aliases})** - ${data[react].action}\n`;
              break;
            case "action":
              actionDescription += `> **${data[react].api_name} (${data[react].aliases})** - ${data[react].action}\n`;
              break;
            default:
              break;
          }
        }

        if (loveDescription !== "") {
          loveEmbed.setDescription(loveDescription.trim());
        } else {
          loveEmbed.setDescription("–ö–æ–º–∞–Ω–¥—ã –ª—é–±–≤–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }

        if (emotionDescription !== "") {
          emotionEmbed.setDescription(emotionDescription.trim());
        } else {
          emotionEmbed.setDescription("–ö–æ–º–∞–Ω–¥—ã —Å —ç–º–æ—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }

        if (actionDescription !== "") {
          actionEmbed.setDescription(actionDescription.trim());
        } else {
          actionEmbed.setDescription("–ö–æ–º–∞–Ω–¥—ã –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }

        await i.message.edit({
          embeds: [descriptionembed, loveEmbed, emotionEmbed, actionEmbed],
          components: [],
        });
      } else {
        const data = JSON.parse(
          await fs.promises.readFile(configs + "/help.json")
        );

   
        
        const economyEmbed = new EmbedBuilder()
          .setImage(img)
          .setTitle(`–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥`)
          .setColor("#2F3136");

        let economyDescription = "";

        for (let type in data) {
          switch (data[type].type) {
            case selection:
              economyDescription += `> **${data[type].name}** - ${data[type].description}\n`;
              break;
          }
        }

        if (economyDescription !== "") {
          economyEmbed.setDescription(economyDescription.trim());
        } else {
          economyEmbed.setDescription("–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }

        await i.message.edit({
          embeds: [ economyEmbed],
          components: [],
        });
      }
    });
  },
};
